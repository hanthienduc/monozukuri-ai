openapi: 3.0.3
info:
  title: 'Manufacturing Inquiry Classification API'
  description: |
    ## Overview
    Automatically classifies manufacturing inquiries using AI/ML to categorize them into predefined types
    for efficient routing and processing.
    
    ## Business Context
    Manufacturers receive various types of inquiries that need different handling. This API automatically
    classifies them to improve response time and accuracy.
    
    ## Technical Requirements
    - Performance: < 200ms p95 response time
    - Accuracy: > 95% classification accuracy
    - Rate Limiting: 100 requests per minute per client
    - Authentication: Firebase Auth required
    
  version: 1.0.0
  contact:
    name: API Support
    email: api@manufacturing-assistant.com

servers:
  - url: https://api.manufacturing-assistant.com/v1
    description: Production
  - url: https://staging-api.manufacturing-assistant.com/v1
    description: Staging
  - url: http://localhost:8000/v1
    description: Development

tags:
  - name: classification
    description: Inquiry classification operations

paths:
  /inquiries/classify:
    post:
      summary: 'Classify a manufacturing inquiry'
      description: |
        ## Purpose
        Analyzes the content of a manufacturing inquiry and classifies it into one of the predefined categories
        with a confidence score.
        
        ## Business Rules
        - Inquiry text must be between 10 and 5000 characters
        - Language detection is automatic (supports EN/JP)
        - Returns multiple categories if confidence is similar
        - Minimum confidence threshold is 0.7 for primary classification
        
        ## Performance Requirements
        - Response time: < 200ms p95
        - Timeout: 30 seconds
        - LLM streaming not required for this endpoint
        
      operationId: classifyInquiry
      tags:
        - classification
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClassificationRequest'
            examples:
              quote_request:
                summary: 'Quote request example'
                value:
                  text: "We need a quote for 1000 units of aluminum brackets with custom drilling"
                  metadata:
                    source: "web_form"
                    customer_id: "cust_12345"
              technical_spec:
                summary: 'Technical specification inquiry'
                value:
                  text: "Can you manufacture parts with 0.001mm tolerance using SUS304 steel?"
                  metadata:
                    source: "email"
                    customer_id: "cust_67890"
              japanese_inquiry:
                summary: 'Japanese language inquiry'
                value:
                  text: "アルミニウム部品の見積もりをお願いします。数量は500個です。"
                  metadata:
                    source: "web_form"
                    customer_id: "cust_jp_123"
      
      responses:
        '200':
          description: Successful classification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationResponse'
              examples:
                high_confidence:
                  summary: 'High confidence classification'
                  value:
                    id: "clf_123e4567-e89b-12d3-a456-426614174000"
                    primary_category: "QUOTE_REQUEST"
                    confidence: 0.95
                    all_categories:
                      - category: "QUOTE_REQUEST"
                        confidence: 0.95
                      - category: "TECHNICAL_SPECIFICATION"
                        confidence: 0.12
                    language: "en"
                    processing_time_ms: 145
                    metadata:
                      model_version: "v1.2.0"
                      processed_at: "2025-08-13T10:30:00Z"
                multi_category:
                  summary: 'Multiple relevant categories'
                  value:
                    id: "clf_223e4567-e89b-12d3-a456-426614174001"
                    primary_category: "TECHNICAL_SPECIFICATION"
                    confidence: 0.78
                    all_categories:
                      - category: "TECHNICAL_SPECIFICATION"
                        confidence: 0.78
                      - category: "CAPABILITY_QUESTION"
                        confidence: 0.72
                    language: "en"
                    processing_time_ms: 167
                    metadata:
                      model_version: "v1.2.0"
                      processed_at: "2025-08-13T10:31:00Z"
        
        '400':
          description: Bad Request - Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                text_too_short:
                  summary: 'Text too short'
                  value:
                    error:
                      code: "VALIDATION_ERROR"
                      message: "Inquiry text must be at least 10 characters"
                      details:
                        - field: "text"
                          message: "Text length is 5, minimum required is 10"
                text_too_long:
                  summary: 'Text exceeds limit'
                  value:
                    error:
                      code: "VALIDATION_ERROR"
                      message: "Inquiry text exceeds maximum length"
                      details:
                        - field: "text"
                          message: "Text length is 5001, maximum allowed is 5000"
        
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        
        '429':
          $ref: '#/components/responses/RateLimitError'
        
        '500':
          $ref: '#/components/responses/InternalServerError'
      
      security:
        - bearerAuth: []

components:
  schemas:
    ClassificationRequest:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          description: 'The inquiry text to classify'
          minLength: 10
          maxLength: 5000
          example: "We need a quote for 1000 aluminum parts"
        metadata:
          type: object
          description: 'Optional metadata about the inquiry'
          properties:
            source:
              type: string
              description: 'Source of the inquiry'
              enum: [web_form, email, chat, phone, api]
              example: "web_form"
            customer_id:
              type: string
              description: 'Customer identifier if known'
              example: "cust_12345"
            timestamp:
              type: string
              format: date-time
              description: 'When the inquiry was received'
            priority:
              type: string
              enum: [low, medium, high, urgent]
              description: 'Business priority if pre-determined'
    
    ClassificationResponse:
      type: object
      required:
        - id
        - primary_category
        - confidence
        - all_categories
        - language
        - processing_time_ms
      properties:
        id:
          type: string
          format: uuid
          description: 'Unique identifier for this classification'
        primary_category:
          type: string
          enum: 
            - QUOTE_REQUEST
            - TECHNICAL_SPECIFICATION
            - CAPABILITY_QUESTION
            - PARTNERSHIP_INQUIRY
            - GENERAL_INQUIRY
            - UNKNOWN
          description: 'Primary classification category'
        confidence:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: 'Confidence score for primary classification (0-1)'
          example: 0.95
        all_categories:
          type: array
          description: 'All potential categories with confidence scores'
          items:
            type: object
            properties:
              category:
                type: string
                enum: 
                  - QUOTE_REQUEST
                  - TECHNICAL_SPECIFICATION
                  - CAPABILITY_QUESTION
                  - PARTNERSHIP_INQUIRY
                  - GENERAL_INQUIRY
                  - UNKNOWN
              confidence:
                type: number
                format: float
                minimum: 0
                maximum: 1
        language:
          type: string
          description: 'Detected language of the inquiry'
          enum: [en, ja, other]
          example: "en"
        suggested_actions:
          type: array
          description: 'Recommended next steps based on classification'
          items:
            type: string
          example: 
            - "Route to sales team"
            - "Generate automated quote template"
        keywords:
          type: array
          description: 'Key terms extracted from the inquiry'
          items:
            type: string
          example: ["aluminum", "quote", "1000 units"]
        processing_time_ms:
          type: integer
          description: 'Time taken to process in milliseconds'
          example: 145
        metadata:
          type: object
          description: 'Additional processing metadata'
          properties:
            model_version:
              type: string
              description: 'Version of the classification model used'
              example: "v1.2.0"
            processed_at:
              type: string
              format: date-time
              description: 'Timestamp of processing'
            fallback_used:
              type: boolean
              description: 'Whether fallback classification was used'
    
    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
              description: 'Error code for programmatic handling'
              enum:
                - VALIDATION_ERROR
                - AUTHENTICATION_ERROR
                - AUTHORIZATION_ERROR
                - NOT_FOUND
                - RATE_LIMIT_EXCEEDED
                - MODEL_ERROR
                - INTERNAL_ERROR
            message:
              type: string
              description: 'Human-readable error message'
            details:
              type: array
              description: 'Additional error details'
              items:
                type: object
                properties:
                  field:
                    type: string
                  message:
                    type: string
            request_id:
              type: string
              description: 'Request ID for troubleshooting'
  
  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              code: "AUTHENTICATION_ERROR"
              message: "Invalid or expired authentication token"
              request_id: "req_abc123"
    
    RateLimitError:
      description: Rate limit exceeded
      headers:
        X-RateLimit-Limit:
          schema:
            type: integer
          description: Request limit per minute
        X-RateLimit-Remaining:
          schema:
            type: integer
          description: Remaining requests
        X-RateLimit-Reset:
          schema:
            type: integer
          description: Time when rate limit resets (Unix timestamp)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              code: "RATE_LIMIT_EXCEEDED"
              message: "Rate limit exceeded. Please retry after 60 seconds"
              request_id: "req_xyz789"
    
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              code: "INTERNAL_ERROR"
              message: "An unexpected error occurred. Please try again later"
              request_id: "req_def456"
  
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'Firebase Auth JWT token'

# Additional Documentation
x-readme:
  samples:
    curl: |
      curl -X POST https://api.manufacturing-assistant.com/v1/inquiries/classify \
        -H "Authorization: Bearer YOUR_TOKEN" \
        -H "Content-Type: application/json" \
        -d '{
          "text": "We need a quote for 1000 aluminum brackets",
          "metadata": {
            "source": "web_form",
            "customer_id": "cust_12345"
          }
        }'
    
    python: |
      import requests
      
      response = requests.post(
          "https://api.manufacturing-assistant.com/v1/inquiries/classify",
          headers={
              "Authorization": "Bearer YOUR_TOKEN",
              "Content-Type": "application/json"
          },
          json={
              "text": "We need a quote for 1000 aluminum brackets",
              "metadata": {
                  "source": "web_form",
                  "customer_id": "cust_12345"
              }
          }
      )
      
      result = response.json()
      print(f"Category: {result['primary_category']}")
      print(f"Confidence: {result['confidence']}")
    
    javascript: |
      const response = await fetch('https://api.manufacturing-assistant.com/v1/inquiries/classify', {
        method: 'POST',
        headers: {
          'Authorization': 'Bearer YOUR_TOKEN',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          text: 'We need a quote for 1000 aluminum brackets',
          metadata: {
            source: 'web_form',
            customer_id: 'cust_12345'
          }
        })
      });
      
      const result = await response.json();
      console.log(`Category: ${result.primary_category}`);
      console.log(`Confidence: ${result.confidence}`);